* Encode and Decode Strings

#+begin_quote
Seemed too simple, but wasn't 100% sure I understood the problem, so I used all of the hints provided.
Hint 3 pratically told you what to do.
#+end_quote
** Encoding

Encode the string by prefixing each string in the list with the length of the current string and some non alpha-numeric character that acts as the separator.
We return an amalgation of all the encoded strings.

#+begin_src python
    def encode(self, strs: List[str]) -> str:
        separator = "#"
        for i, s in enumerate(strs):
            strs[i] = f"{len(s)}{separator}{s}"

        return ''.join(strs)  
#+end_src

** Decoding

Decode by reading the number until you reach the non alphanumeric separator. We store this as ~str_len~.
We use this number to get the words in index ~i + 1~ to ~i + 1 + num_len~ of the string and store it in our ~res~ array

#+begin_src python
def decode(self, s: str):
    str_len = ''
    num_len = 0
    res = []
    i = 0

    while i < len(s):
        if not s[i].isalnum():
            num_len = int(str_len)
            res.append(s[i + 1: i + 1 + num_len])
            i += num_len + 1
            str_len = ''
            num_len = 0
            continue
        str_len += s[i]
        i += 1

    return res
  
#+end_src


*** Full Code
#+begin_src python
  def encode(self, strs: List[str]) -> str:
      separator = "#"
      for i, s in enumerate(strs):
          strs[i] = f"{len(s)}{separator}{s}"

      return ''.join(strs)

  def decode(self, s: str):
      str_len = ''
      num_len = 0
      res = []
      i = 0

      while i < len(s):
          if not s[i].isalnum():
              num_len = int(str_len)
              res.append(s[i + 1: i + 1 + num_len])
              i += num_len + 1
              str_len = ''
              num_len = 0
              continue
          str_len += s[i]
          i += 1

      return res

#+end_src

